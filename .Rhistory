}
### Testando
accuracy <- function(y_true, y_pred) {
acc <- sum(y_true == y_pred)/length(y_pred)
return(round(acc, 4))
}
fried_optlambda <- function(CQ, lambda, X, y) {
}
evaluate_mod <- function(data, mod, prop_train = 0.8, n_runs = 100, cov_type = NULL,
lambda = NULL, opt_lambda = F) {
worse_acc <- 100
worse_cm <- NULL
best_acc <- 0
best_cm <- NULL
accs <- c()
for(i in 1:n_runs) {
set.seed(i)
data_split <- initial_split(data = data, prop = prop_train, strata = NSP)
train_data <- training(data_split)
test_data <- testing(data_split)
X_train <- train_data %>% mutate(CLASS = NULL, NSP = NULL)
X_test <- test_data %>% mutate(CLASS = NULL, NSP = NULL)
y_train <- train_data %>% pull(NSP)
y_test <- test_data %>% pull(NSP)
y_label <- c("Normal", "Suspect", "Pathologic")
if(mod == "CQ") {
classifier = CQ
predictor = predict_CQ
} else if(mod == "LMQ") {
classifier = LMQ
predictor = predict_LMQ
} else {
return(message("Modelo de Classificação Não Implementado"))
}
if(!is.null(cov_type) & cov_type == "fried" & opt_lambda) {
mod_ <- NULL
best_acc <- 0
for(l in seq(0, .99, .01)) {
mod_temp <- classifier(X_train, y_train, cov_type = cov_type, lambda = l)
y_pred <- predictor(mod_, X_test)
acc <- accuracy(y_test, y_pred)
message(paste0("Acurácia com lambda ", l, ": ", acc*100))
if(acc > best_acc) {
best_acc <- acc
mod_ <- mod_temp
}
}
message(paste0("Melhor Valor de Lambda: ", mod_[[4]]))
} else{
mod_ <- classifier(X_train, y_train, cov_type = cov_type, lambda = lambda)
}
y_pred <- predictor(mod_, X_test)
cm <- table(y_pred = y_label[y_pred], y_true = y_label[y_test])
acc <- accuracy(y_test, y_pred)
accs <- c(accs, acc)
if(acc < worse_acc) {
#message(paste0("Pior Acurácia: ", acc*100))
worse_acc <- acc
worse_cm <- cm
}
if(acc > best_acc) {
#message(paste0("Melhor Acurácia: ", acc*100))
best_acc <- acc
best_cm <- cm
}
}
return(list(paste0(mod, cov_type), accs, `Pior Caso` = worse_cm, `Melhor Caso` = best_cm))
}
get_statistics <- function(eval_mod) {
accs <- eval_mod[[2]]*100
n <- length(accs)
m <- mean(accs)
sd_m <- sd(accs)/sqrt(n)
med <- median(accs)
sd_med <- sd_m * sqrt(pi/2)
stat <- data.frame(Min = min(accs), Media = paste0(round(m, 2), " +/- ", round(sd_m, 2)),
Mediana = paste0(round(med, 2), " +/- ", round(sd_med, 2)), Max = max(accs))
rownames(stat) <- eval_mod[[1]]
return(stat)
}
# a <- get_statistics(CQfull_eval)
# orig.names <- names(a) # in case you want to restore the original names
# name.width <- max(sapply(names(a), nchar))
# names(a) <- format(names(a), width = name.width, justify = "centre")
# format(a, width = name.width, justify = "centre")
CQfried_eval <- evaluate_mod(data = cardiotocography_data, mod = "CQ", cov_type = "fried", lambda = 0.5, opt_lambda = T)
CQfried_eval <- evaluate_mod(data = cardiotocography_data, mod = "CQ", cov_type = "fried", lambda = 0.5)
evaluate_mod <- function(data, mod, prop_train = 0.8, n_runs = 100, cov_type = NULL,
lambda = NULL, opt_lambda = F) {
worse_acc <- 100
worse_cm <- NULL
best_acc <- 0
best_cm <- NULL
accs <- c()
for(i in 1:n_runs) {
set.seed(i)
data_split <- initial_split(data = data, prop = prop_train, strata = NSP)
train_data <- training(data_split)
test_data <- testing(data_split)
X_train <- train_data %>% mutate(CLASS = NULL, NSP = NULL)
X_test <- test_data %>% mutate(CLASS = NULL, NSP = NULL)
y_train <- train_data %>% pull(NSP)
y_test <- test_data %>% pull(NSP)
y_label <- c("Normal", "Suspect", "Pathologic")
if(mod == "CQ") {
classifier = CQ
predictor = predict_CQ
} else if(mod == "LMQ") {
classifier = LMQ
predictor = predict_LMQ
} else {
return(message("Modelo de Classificação Não Implementado"))
}
if(!is.null(cov_type) & cov_type == "fried" & opt_lambda) {
mod_ <- NULL
best_acc <- 0
for(l in seq(0, .99, .01)) {
mod_temp <- classifier(X_train, y_train, cov_type = cov_type, lambda = l)
y_pred <- predictor(mod_temp, X_test)
acc <- accuracy(y_test, y_pred)
message(paste0("Acurácia com lambda ", l, ": ", acc*100))
if(acc > best_acc) {
best_acc <- acc
mod_ <- mod_temp
}
}
message(paste0("Melhor Valor de Lambda: ", mod_[[4]]))
} else{
mod_ <- classifier(X_train, y_train, cov_type = cov_type, lambda = lambda)
}
y_pred <- predictor(mod_, X_test)
cm <- table(y_pred = y_label[y_pred], y_true = y_label[y_test])
acc <- accuracy(y_test, y_pred)
accs <- c(accs, acc)
if(acc < worse_acc) {
#message(paste0("Pior Acurácia: ", acc*100))
worse_acc <- acc
worse_cm <- cm
}
if(acc > best_acc) {
#message(paste0("Melhor Acurácia: ", acc*100))
best_acc <- acc
best_cm <- cm
}
}
return(list(paste0(mod, cov_type), accs, `Pior Caso` = worse_cm, `Melhor Caso` = best_cm))
}
CQfried_eval <- evaluate_mod(data = cardiotocography_data, mod = "CQ", cov_type = "fried", lambda = 0.5, opt_lambda = T)
evaluate_mod <- function(data, mod, prop_train = 0.8, n_runs = 100, cov_type = NULL,
lambda = NULL, opt_lambda = F) {
worse_acc <- 100
worse_cm <- NULL
best_acc <- 0
best_cm <- NULL
accs <- c()
for(i in 1:n_runs) {
set.seed(i)
data_split <- initial_split(data = data, prop = prop_train, strata = NSP)
train_data <- training(data_split)
test_data <- testing(data_split)
X_train <- train_data %>% mutate(CLASS = NULL, NSP = NULL)
X_test <- test_data %>% mutate(CLASS = NULL, NSP = NULL)
y_train <- train_data %>% pull(NSP)
y_test <- test_data %>% pull(NSP)
y_label <- c("Normal", "Suspect", "Pathologic")
if(mod == "CQ") {
classifier = CQ
predictor = predict_CQ
} else if(mod == "LMQ") {
classifier = LMQ
predictor = predict_LMQ
} else {
return(message("Modelo de Classificação Não Implementado"))
}
if(!is.null(cov_type) & cov_type == "fried" & opt_lambda) {
mod_ <- NULL
best_acc <- 0
for(l in seq(0, .99, .01)) {
mod_temp <- classifier(X_train, y_train, cov_type = cov_type, lambda = l)
y_pred <- predictor(mod_temp, X_test)
acc <- accuracy(y_test, y_pred)
if(acc > best_acc) {
best_acc <- acc
mod_ <- mod_temp
}
}
message(paste0("Melhor Valor de Lambda na Iteração ", i," : ", mod_[[4]]))
} else{
mod_ <- classifier(X_train, y_train, cov_type = cov_type, lambda = lambda)
}
y_pred <- predictor(mod_, X_test)
cm <- table(y_pred = y_label[y_pred], y_true = y_label[y_test])
acc <- accuracy(y_test, y_pred)
accs <- c(accs, acc)
if(acc < worse_acc) {
#message(paste0("Pior Acurácia: ", acc*100))
worse_acc <- acc
worse_cm <- cm
}
if(acc > best_acc) {
#message(paste0("Melhor Acurácia: ", acc*100))
best_acc <- acc
best_cm <- cm
}
}
return(list(paste0(mod, cov_type), accs, `Pior Caso` = worse_cm, `Melhor Caso` = best_cm))
}
CQfried_eval <- evaluate_mod(data = cardiotocography_data, mod = "CQ", cov_type = "fried", lambda = 0.5, opt_lambda = T)
get_statistics(CQfried_eval)
get_statistics(CQfull_eval)
knitr::opts_chunk$set(echo = F, warning = F, message = F,
fig.pos = 'h', fig.align = 'center')
source("TrabRP.R")
library(ggthemr)
source("palletes.R")
ggthemr(my_greyscale)
temp_exec %>% kruskal.test(time ~ expr)
#wilc <- pairwise.wilcox.test(temp_exec$time, temp_exec$expr)
#wilc$p.value
temp_exec %>%
dunn_test(time ~ expr, p.adjust.method = "hold")
install.packages('rstatix')
library(rstatix)
temp_exec %>%
dunn_test(time ~ expr, p.adjust.method = "hold")
temp_exec %>%
dunn_test(time ~ expr, p.adjust.method = "holm")
temp_exec %>%
dunn_test(time ~ expr, p.adjust.method = "hold")
temp_exec %>% kruskal.test(time ~ expr)
a <- temp_exec %>%
dunn_test(time ~ expr, p.adjust.method = "holm")
library(tidyverse)
library(lubridate)
library(ggthemr)
library(ragg)
data_frank <- read_csv("C:/Users/Daniel/Desktop/WCAMA 2021/sheet_master.csv")
sens <- c(paste0("A", 0:5), paste0("AB", 0:5), paste0("B", 0:5),
paste0("C", 0:5), paste0("CD", 0:5), paste0("D", 0:5))
data_frank %>%
mutate(DateTime = round_date(DateTime, unit = "hour"))
data_frank %>%
mutate(DateTime = round_date(DateTime, unit = "hour")) %>%
group_by(DateTime) %>%
summarise(across(A0:D5, mean(., na.rm = T)))
data_frank %>%
mutate(DateTime = round_date(DateTime, unit = "hour")) %>%
group_by(DateTime) %>%
summarise(across(A0:D5, ~mean(x, na.rm = T)))
data_frank %>%
mutate(DateTime = round_date(DateTime, unit = "hour")) %>%
group_by(DateTime) %>%
summarise(across(A0:D5, ~mean(.x, na.rm = T)))
data_frank %>%
mutate(DateTime = round_date(DateTime, unit = "hour")) %>%
group_by(DateTime) %>%
summarise(across(A0:D5, ~mean(.x, na.rm = T))) %>%
drop_na()
data_frank %>%
mutate(DateTime = round_date(DateTime, unit = "hour")) %>%
group_by(DateTime) %>%
summarise(across(A0:D5, ~mean(.x, na.rm = T))) %>%
drop_na() %>%
write_csv("master_complet_frank_hourly.csv")
setwd("C:/Users/Daniel/Desktop/Disciplinas/Tópicos Especiais em Lógica II/Trabalho Final")
library(dplyr)
library(readr)
library(fs)
library(purrr)
library(stringr)
library(tidyr)
library(ggplot2)
library(ggthemr)
library(lubridate)
library(glue)
ggthemr("fresh")
paths <- dir_ls("./raw_data/", glob = "*.csv")
data <- map_dfr(paths, read_csv, .id = "path")
# Preprocessamento
data <- data %>%
mutate(path = str_extract(path, "(?<=\\-)(.*?)(?=\\.)"),
cl = str_remove(as.character(data$cl), ".{3}$"),
cl = ms(cl),
Minute = minute(cl), Second = second(cl),
Minute = if_else(Minute == 12, 12 - Minute,
if_else(Minute == 0 & Second == 0, 12, 11 - Minute)),
Second = if_else(Second == 0, 0, 60 - Second),
Minute = if_else(qrt != "1st", (as.numeric(str_remove(qrt, "st")) - 1) * 12 + Minute, Minute)) %>%
separate(col = path, into = c("AwayName", "HomeName"), sep = 3) %>%
rename(ID = id, Quarter = qrt, Time = cl, Description = de, HomeScore = hs, AwayScore = vs) %>%
inner_join(abb, by = c("HomeName" = "Abb")) %>% rename(HomeNameAll = Name) %>%
inner_join(abb, by = c("AwayName" = "Abb")) %>% rename(AwayNameAll = Name) %>%
select(ID, Quarter, Minute, Second, HomeName, HomeNameAll, HomeScore, AwayName, AwayNameAll, AwayScore, Description, locX, locY)
abb <- read_delim("abbreviations_NBA.txt", "\t")
abb
abb <- read_delim("abbreviations_NBA.txt", "\t", col_names = c("Abb", "Name"))
# Preprocessamento
data <- data %>%
mutate(path = str_extract(path, "(?<=\\-)(.*?)(?=\\.)"),
cl = str_remove(as.character(data$cl), ".{3}$"),
cl = ms(cl),
Minute = minute(cl), Second = second(cl),
Minute = if_else(Minute == 12, 12 - Minute,
if_else(Minute == 0 & Second == 0, 12, 11 - Minute)),
Second = if_else(Second == 0, 0, 60 - Second),
Minute = if_else(qrt != "1st", (as.numeric(str_remove(qrt, "st")) - 1) * 12 + Minute, Minute)) %>%
separate(col = path, into = c("AwayName", "HomeName"), sep = 3) %>%
rename(ID = id, Quarter = qrt, Time = cl, Description = de, HomeScore = hs, AwayScore = vs) %>%
inner_join(abb, by = c("HomeName" = "Abb")) %>% rename(HomeNameAll = Name) %>%
inner_join(abb, by = c("AwayName" = "Abb")) %>% rename(AwayNameAll = Name) %>%
select(ID, Quarter, Minute, Second, HomeName, HomeNameAll, HomeScore, AwayName, AwayNameAll, AwayScore, Description, locX, locY)
#data_gp <-
data %>%
pivot_longer(cols = c(HomeName, AwayName), names_to = "Place", values_to = "Team") %>%
filter(Team == "HOU") %>%
mutate(Place = str_remove(Place, "Name"),
Score = if_else(Place == "Home", HomeScore, AwayScore),
RivalScore = if_else(Place == "Away", HomeScore, AwayScore)) %>%
select(ID, Place, HomeNameAll, AwayNameAll, Quarter, Minute, Second, Score, RivalScore, Description, locX, locY) %>%
distinct(ID, Place, Quarter, Score, .keep_all = T) %>%
filter(!(Description == "Start Period" & Quarter != "1st")) %>%
group_by(ID, Minute) %>%
mutate(ScoreMinute = max(Score)) %>%
ungroup() %>% distinct(ID, Minute, .keep_all = T) %>%
select(ID, Place, HomeNameAll, AwayNameAll, Minute, ScoreMinute, RivalScore) %>%
rename(Score = ScoreMinute)
data_gp <- data %>%
pivot_longer(cols = c(HomeName, AwayName), names_to = "Place", values_to = "Team") %>%
filter(Team == "HOU") %>%
mutate(Place = str_remove(Place, "Name"),
Score = if_else(Place == "Home", HomeScore, AwayScore),
RivalScore = if_else(Place == "Away", HomeScore, AwayScore)) %>%
select(ID, Place, HomeNameAll, AwayNameAll, Quarter, Minute, Second, Score, RivalScore, Description, locX, locY) %>%
distinct(ID, Place, Quarter, Score, .keep_all = T) %>%
filter(!(Description == "Start Period" & Quarter != "1st")) %>%
group_by(ID, Minute) %>%
mutate(ScoreMinute = max(Score)) %>%
ungroup() %>% distinct(ID, Minute, .keep_all = T) %>%
select(ID, Place, HomeNameAll, AwayNameAll, Minute, ScoreMinute, RivalScore) %>%
rename(Score = ScoreMinute)
data_gp %>%
right_join(data_gp %>%
distinct(ID, Place, HomeNameAll, AwayNameAllk) %>%
mutate(Minute = list(0:48)) %>%
unnest(Minute)) %>%
arrange(ID, Minute) %>%
group_by(ID) %>%
fill(Score)
data_gp %>%
right_join(data_gp %>%
distinct(ID, Place, HomeNameAll, AwayNameAll) %>%
mutate(Minute = list(0:48)) %>%
unnest(Minute)) %>%
arrange(ID, Minute) %>%
group_by(ID) %>%
fill(Score)
data_gp <- data %>%
pivot_longer(cols = c(HomeName, AwayName), names_to = "Place", values_to = "Team") %>%
filter(Team == "HOU") %>%
mutate(Place = str_remove(Place, "Name"),
Score = if_else(Place == "Home", HomeScore, AwayScore),
RivalScore = if_else(Place == "Away", HomeScore, AwayScore)) %>%
select(ID, Place, HomeNameAll, AwayNameAll, Quarter, Minute, Second, Score, RivalScore, Description, locX, locY) %>%
distinct(ID, Place, Quarter, Score, .keep_all = T) %>%
filter(!(Description == "Start Period" & Quarter != "1st")) %>%
group_by(ID, Minute) %>%
mutate(ScoreMinute = max(Score),
RivalScoreMinute = max(RivalScore)) %>%
ungroup() %>% distinct(ID, Minute, .keep_all = T) %>%
select(ID, Place, HomeNameAll, AwayNameAll, Minute, ScoreMinute, RivalScoreMinute) %>%
rename(Score = ScoreMinute, RivalScore = RivalScoreMinute)
data_gp %>%
right_join(data_gp %>%
distinct(ID, Place, HomeNameAll, AwayNameAll) %>%
mutate(Minute = list(0:48)) %>%
unnest(Minute)) %>%
arrange(ID, Minute) %>%
group_by(ID) %>%
fill(Score)
data_gp <- data %>%
pivot_longer(cols = c(HomeName, AwayName), names_to = "Place", values_to = "Team") %>%
filter(Team == "HOU") %>%
mutate(Place = str_remove(Place, "Name"),
Score = if_else(Place == "Home", HomeScore, AwayScore),
RivalScore = if_else(Place == "Away", HomeScore, AwayScore)) %>%
select(ID, Place, HomeNameAll, AwayNameAll, Quarter, Minute, Second, Score, RivalScore, Description, locX, locY) %>%
distinct(ID, Place, Quarter, Score, .keep_all = T) %>%
filter(!(Description == "Start Period" & Quarter != "1st")) %>%
group_by(ID, Minute) %>%
mutate(ScoreMinute = max(Score),
RivalScoreMinute = max(RivalScore)) %>%
ungroup() %>% distinct(ID, Minute, .keep_all = T) %>%
select(ID, Place, HomeNameAll, AwayNameAll, Minute, ScoreMinute, RivalScoreMinute) %>%
rename(Score = ScoreMinute, RivalScore = RivalScoreMinute)
data_gp
data_gp %>%
right_join(data_gp %>%
distinct(ID, Place, HomeNameAll, AwayNameAll) %>%
mutate(Minute = list(0:48)) %>%
unnest(Minute)) %>%
arrange(ID, Minute) %>%
group_by(ID) %>%
fill(Score) %>%
fill(RivalScore)
data_gp <- data %>%
pivot_longer(cols = c(HomeName, AwayName), names_to = "Place", values_to = "Team") %>%
filter(Team == "HOU") %>%
mutate(Place = str_remove(Place, "Name"),
Score = if_else(Place == "Home", HomeScore, AwayScore),
RivalScore = if_else(Place == "Away", HomeScore, AwayScore)) %>%
select(ID, Place, HomeNameAll, AwayNameAll, Quarter, Minute, Second, Score, RivalScore, Description, locX, locY) %>%
distinct(ID, Place, Quarter, Score, .keep_all = T) %>%
filter(!(Description == "Start Period" & Quarter != "1st")) %>%
group_by(ID, Minute) %>%
mutate(ScoreMinute = max(Score)) %>%
ungroup() %>% distinct(ID, Minute, .keep_all = T) %>%
select(ID, Place, HomeNameAll, AwayNameAll, Minute, ScoreMinute, RivalScore) %>%
rename(Score = ScoreMinute)
data_gp %>%
right_join(data_gp %>%
distinct(ID, Place, HomeNameAll, AwayNameAll) %>%
mutate(Minute = list(0:48)) %>%
unnest(Minute)) %>%
arrange(ID, Minute) %>%
group_by(ID) %>%
fill(Score) %>% fill(RivalScore)
data_gp %>%
right_join(data_gp %>%
distinct(ID, Place, HomeNameAll, AwayNameAll) %>%
mutate(Minute = list(0:48)) %>%
unnest(Minute)) %>%
arrange(ID, Minute) %>%
group_by(ID) %>%
fill(Score) %>% fill(RivalScore) %>%
mutate(Home = if_else(Place == "Home", 1, 0)) %>%
select(ID, HomeNameAll, AwayNameAll, Home, Minute, RivalScore, Score)
data_gp %>%
right_join(data_gp %>%
distinct(ID, Place, HomeNameAll, AwayNameAll) %>%
mutate(Minute = list(0:48)) %>%
unnest(Minute)) %>%
arrange(ID, Minute) %>%
group_by(ID) %>%
fill(Score) %>% fill(RivalScore) %>%
mutate(Home = if_else(Place == "Home", 1, 0)) %>%
select(ID, HomeNameAll, AwayNameAll, Home, Minute, RivalScore, Score) -> data_gp
library(dplyr)
library(readr)
library(fs)
library(purrr)
library(stringr)
library(tidyr)
library(ggplot2)
library(ggthemr)
library(lubridate)
library(glue)
ggthemr("fresh")
paths <- dir_ls("./raw_data/", glob = "*.csv")
data <- map_dfr(paths, read_csv, .id = "path")
abb <- read_delim("abbreviations_NBA.txt", "\t", col_names = c("Abb", "Name"))
# Preprocessamento
data <- data %>%
mutate(path = str_extract(path, "(?<=\\-)(.*?)(?=\\.)"),
cl = str_remove(as.character(data$cl), ".{3}$"),
cl = ms(cl),
Minute = minute(cl), Second = second(cl),
Minute = if_else(Minute == 12, 12 - Minute,
if_else(Minute == 0 & Second == 0, 12, 11 - Minute)),
Second = if_else(Second == 0, 0, 60 - Second),
Minute = if_else(qrt != "1st", (as.numeric(str_remove(qrt, "st")) - 1) * 12 + Minute, Minute)) %>%
separate(col = path, into = c("AwayName", "HomeName"), sep = 3) %>%
rename(ID = id, Quarter = qrt, Time = cl, Description = de, HomeScore = hs, AwayScore = vs) %>%
inner_join(abb, by = c("HomeName" = "Abb")) %>% rename(HomeNameAll = Name) %>%
inner_join(abb, by = c("AwayName" = "Abb")) %>% rename(AwayNameAll = Name) %>%
select(ID, Quarter, Minute, Second, HomeName, HomeNameAll, HomeScore, AwayName, AwayNameAll, AwayScore, Description, locX, locY)
data_gp <- data %>%
pivot_longer(cols = c(HomeName, AwayName), names_to = "Place", values_to = "Team") %>%
filter(Team == "HOU") %>%
mutate(Place = str_remove(Place, "Name"),
Score = if_else(Place == "Home", HomeScore, AwayScore),
RivalScore = if_else(Place == "Away", HomeScore, AwayScore)) %>%
select(ID, Place, HomeNameAll, AwayNameAll, Quarter, Minute, Second, Score, RivalScore, Description, locX, locY) %>%
distinct(ID, Place, Quarter, Score, .keep_all = T) %>%
filter(!(Description == "Start Period" & Quarter != "1st")) %>%
group_by(ID, Minute) %>%
mutate(ScoreMinute = max(Score)) %>%
ungroup() %>% distinct(ID, Minute, .keep_all = T) %>%
select(ID, Place, HomeNameAll, AwayNameAll, Minute, ScoreMinute, RivalScore) %>%
rename(Score = ScoreMinute)
data_gp %>%
right_join(data_gp %>%
distinct(ID, Place, HomeNameAll, AwayNameAll) %>%
mutate(Minute = list(0:48)) %>%
unnest(Minute)) %>%
arrange(ID, Minute) %>%
group_by(ID) %>%
fill(Score) %>% fill(RivalScore) %>%
mutate(Home = if_else(Place == "Home", 1, 0)) %>%
select(ID, HomeNameAll, AwayNameAll, Home, Minute, RivalScore, Score) -> data_gp
data_gmm <- data %>%
pivot_longer(cols = c(HomeName, AwayName), names_to = "Place", values_to = "Team") %>%
filter(Team == "HOU") %>%
mutate(Place = str_remove(Place, "Name"),
Score = if_else(Place == "Home", HomeScore, AwayScore)) %>%
select(ID, Place, Quarter, Minute, Second, Score, Description, locX, locY) %>%
distinct(ID, Place, Quarter, Score, .keep_all = T) %>%
filter(Description != "Start Period")
write_csv(data_gp, "data_gp.csv")
write_csv(data_gmm, "data_gmm.csv")
colnames(data_gmm)
colnames(data_gp)
colnames(data_gp)
